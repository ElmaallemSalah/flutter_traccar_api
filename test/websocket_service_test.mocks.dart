// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_traccar_api/test/websocket_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:async/async.dart' as _i10;
import 'package:dio/dio.dart' as _i4;
import 'package:flutter_traccar_api/src/services/auth_manager.dart' as _i7;
import 'package:flutter_traccar_api/src/services/cache_manager.dart' as _i3;
import 'package:flutter_traccar_api/src/services/http_service.dart' as _i2;
import 'package:flutter_traccar_api/src/services/request_batcher.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stream_channel/stream_channel.dart' as _i6;
import 'package:web_socket_channel/src/channel.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeHttpService_0 extends _i1.SmartFake implements _i2.HttpService {
  _FakeHttpService_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCacheManager_1 extends _i1.SmartFake implements _i3.CacheManager {
  _FakeCacheManager_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDio_2 extends _i1.SmartFake implements _i4.Dio {
  _FakeDio_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeHttpClientConfig_3 extends _i1.SmartFake
    implements _i2.HttpClientConfig {
  _FakeHttpClientConfig_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCacheStats_4 extends _i1.SmartFake implements _i3.CacheStats {
  _FakeCacheStats_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResponse_5<T1> extends _i1.SmartFake implements _i4.Response<T1> {
  _FakeResponse_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWebSocketSink_6 extends _i1.SmartFake implements _i5.WebSocketSink {
  _FakeWebSocketSink_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamChannel_7<T> extends _i1.SmartFake
    implements _i6.StreamChannel<T> {
  _FakeStreamChannel_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthManager extends _i1.Mock implements _i7.AuthManager {
  MockAuthManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAuthenticated =>
      (super.noSuchMethod(
            Invocation.getter(#isAuthenticated),
            returnValue: false,
          )
          as bool);

  @override
  _i2.HttpService get httpService =>
      (super.noSuchMethod(
            Invocation.getter(#httpService),
            returnValue: _FakeHttpService_0(
              this,
              Invocation.getter(#httpService),
            ),
          )
          as _i2.HttpService);

  @override
  _i8.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<bool> login({
    required String? username,
    required String? password,
    required String? baseUrl,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#login, [], {
              #username: username,
              #password: password,
              #baseUrl: baseUrl,
            }),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<void> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<bool> hasCachedCredentials() =>
      (super.noSuchMethod(
            Invocation.method(#hasCachedCredentials, []),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> refreshAuth() =>
      (super.noSuchMethod(
            Invocation.method(#refreshAuth, []),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);
}

/// A class which mocks [HttpService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpService extends _i1.Mock implements _i2.HttpService {
  MockHttpService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.CacheManager get cacheManager =>
      (super.noSuchMethod(
            Invocation.getter(#cacheManager),
            returnValue: _FakeCacheManager_1(
              this,
              Invocation.getter(#cacheManager),
            ),
          )
          as _i3.CacheManager);

  @override
  _i4.Dio get dio =>
      (super.noSuchMethod(
            Invocation.getter(#dio),
            returnValue: _FakeDio_2(this, Invocation.getter(#dio)),
          )
          as _i4.Dio);

  @override
  bool get isAuthenticated =>
      (super.noSuchMethod(
            Invocation.getter(#isAuthenticated),
            returnValue: false,
          )
          as bool);

  @override
  _i2.HttpClientConfig get config =>
      (super.noSuchMethod(
            Invocation.getter(#config),
            returnValue: _FakeHttpClientConfig_3(
              this,
              Invocation.getter(#config),
            ),
          )
          as _i2.HttpClientConfig);

  @override
  void setBaseUrl(String? baseUrl) => super.noSuchMethod(
    Invocation.method(#setBaseUrl, [baseUrl]),
    returnValueForMissingStub: null,
  );

  @override
  void setBasicAuthToken(String? username, String? password) =>
      super.noSuchMethod(
        Invocation.method(#setBasicAuthToken, [username, password]),
        returnValueForMissingStub: null,
      );

  @override
  void clearAuthToken() => super.noSuchMethod(
    Invocation.method(#clearAuthToken, []),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<T?> getCached<T>(
    String? endpoint, {
    T Function(Map<String, dynamic>)? fromJson,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getCached, [endpoint], {#fromJson: fromJson}),
            returnValue: _i8.Future<T?>.value(),
          )
          as _i8.Future<T?>);

  @override
  _i8.Future<void> invalidateCache(String? endpoint) =>
      (super.noSuchMethod(
            Invocation.method(#invalidateCache, [endpoint]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> clearCache() =>
      (super.noSuchMethod(
            Invocation.method(#clearCache, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<_i3.CacheStats> getCacheStats() =>
      (super.noSuchMethod(
            Invocation.method(#getCacheStats, []),
            returnValue: _i8.Future<_i3.CacheStats>.value(
              _FakeCacheStats_4(this, Invocation.method(#getCacheStats, [])),
            ),
          )
          as _i8.Future<_i3.CacheStats>);

  @override
  void resetRateLimit() => super.noSuchMethod(
    Invocation.method(#resetRateLimit, []),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<_i4.Response<T>> batchedGet<T>(
    String? path, {
    Map<String, dynamic>? queryParameters,
    _i4.Options? options,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #batchedGet,
              [path],
              {#queryParameters: queryParameters, #options: options},
            ),
            returnValue: _i8.Future<_i4.Response<T>>.value(
              _FakeResponse_5<T>(
                this,
                Invocation.method(
                  #batchedGet,
                  [path],
                  {#queryParameters: queryParameters, #options: options},
                ),
              ),
            ),
          )
          as _i8.Future<_i4.Response<T>>);

  @override
  _i8.Future<void> flushAllBatches() =>
      (super.noSuchMethod(
            Invocation.method(#flushAllBatches, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<_i4.Response<T>> get<T>(
    String? path, {
    Map<String, dynamic>? queryParameters,
    _i4.Options? options,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #get,
              [path],
              {#queryParameters: queryParameters, #options: options},
            ),
            returnValue: _i8.Future<_i4.Response<T>>.value(
              _FakeResponse_5<T>(
                this,
                Invocation.method(
                  #get,
                  [path],
                  {#queryParameters: queryParameters, #options: options},
                ),
              ),
            ),
          )
          as _i8.Future<_i4.Response<T>>);

  @override
  _i8.Future<_i4.Response<T>> post<T>(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i4.Options? options,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
              },
            ),
            returnValue: _i8.Future<_i4.Response<T>>.value(
              _FakeResponse_5<T>(
                this,
                Invocation.method(
                  #post,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                  },
                ),
              ),
            ),
          )
          as _i8.Future<_i4.Response<T>>);

  @override
  _i8.Future<_i4.Response<T>> put<T>(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i4.Options? options,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #put,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
              },
            ),
            returnValue: _i8.Future<_i4.Response<T>>.value(
              _FakeResponse_5<T>(
                this,
                Invocation.method(
                  #put,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                  },
                ),
              ),
            ),
          )
          as _i8.Future<_i4.Response<T>>);

  @override
  _i8.Future<_i4.Response<T>> delete<T>(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i4.Options? options,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
              },
            ),
            returnValue: _i8.Future<_i4.Response<T>>.value(
              _FakeResponse_5<T>(
                this,
                Invocation.method(
                  #delete,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                  },
                ),
              ),
            ),
          )
          as _i8.Future<_i4.Response<T>>);

  @override
  void initializeBatching(_i4.Dio? dio, _i9.BatchConfig? config) =>
      super.noSuchMethod(
        Invocation.method(#initializeBatching, [dio, config]),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<_i4.Response<T>> batchedRequest<T>({
    required String? method,
    required String? path,
    Map<String, dynamic>? queryParameters,
    dynamic data,
    _i4.Options? options,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#batchedRequest, [], {
              #method: method,
              #path: path,
              #queryParameters: queryParameters,
              #data: data,
              #options: options,
            }),
            returnValue: _i8.Future<_i4.Response<T>>.value(
              _FakeResponse_5<T>(
                this,
                Invocation.method(#batchedRequest, [], {
                  #method: method,
                  #path: path,
                  #queryParameters: queryParameters,
                  #data: data,
                  #options: options,
                }),
              ),
            ),
          )
          as _i8.Future<_i4.Response<T>>);

  @override
  _i8.Future<void> flushBatches() =>
      (super.noSuchMethod(
            Invocation.method(#flushBatches, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  void disposeBatching() => super.noSuchMethod(
    Invocation.method(#disposeBatching, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [WebSocketChannel].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebSocketChannel extends _i1.Mock implements _i5.WebSocketChannel {
  MockWebSocketChannel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> get ready =>
      (super.noSuchMethod(
            Invocation.getter(#ready),
            returnValue: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i5.WebSocketSink get sink =>
      (super.noSuchMethod(
            Invocation.getter(#sink),
            returnValue: _FakeWebSocketSink_6(this, Invocation.getter(#sink)),
          )
          as _i5.WebSocketSink);

  @override
  _i8.Stream<dynamic> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i8.Stream<dynamic>.empty(),
          )
          as _i8.Stream<dynamic>);

  @override
  void pipe(_i6.StreamChannel<dynamic>? other) => super.noSuchMethod(
    Invocation.method(#pipe, [other]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.StreamChannel<S> transform<S>(
    _i6.StreamChannelTransformer<S, dynamic>? transformer,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#transform, [transformer]),
            returnValue: _FakeStreamChannel_7<S>(
              this,
              Invocation.method(#transform, [transformer]),
            ),
          )
          as _i6.StreamChannel<S>);

  @override
  _i6.StreamChannel<dynamic> transformStream(
    _i8.StreamTransformer<dynamic, dynamic>? transformer,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#transformStream, [transformer]),
            returnValue: _FakeStreamChannel_7<dynamic>(
              this,
              Invocation.method(#transformStream, [transformer]),
            ),
          )
          as _i6.StreamChannel<dynamic>);

  @override
  _i6.StreamChannel<dynamic> transformSink(
    _i10.StreamSinkTransformer<dynamic, dynamic>? transformer,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#transformSink, [transformer]),
            returnValue: _FakeStreamChannel_7<dynamic>(
              this,
              Invocation.method(#transformSink, [transformer]),
            ),
          )
          as _i6.StreamChannel<dynamic>);

  @override
  _i6.StreamChannel<dynamic> changeStream(
    _i8.Stream<dynamic> Function(_i8.Stream<dynamic>)? change,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#changeStream, [change]),
            returnValue: _FakeStreamChannel_7<dynamic>(
              this,
              Invocation.method(#changeStream, [change]),
            ),
          )
          as _i6.StreamChannel<dynamic>);

  @override
  _i6.StreamChannel<dynamic> changeSink(
    _i8.StreamSink<dynamic> Function(_i8.StreamSink<dynamic>)? change,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#changeSink, [change]),
            returnValue: _FakeStreamChannel_7<dynamic>(
              this,
              Invocation.method(#changeSink, [change]),
            ),
          )
          as _i6.StreamChannel<dynamic>);

  @override
  _i6.StreamChannel<S> cast<S>() =>
      (super.noSuchMethod(
            Invocation.method(#cast, []),
            returnValue: _FakeStreamChannel_7<S>(
              this,
              Invocation.method(#cast, []),
            ),
          )
          as _i6.StreamChannel<S>);
}
